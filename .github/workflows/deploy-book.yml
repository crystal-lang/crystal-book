name: Deploy book
on:
  push:
  pull_request:
  schedule:
    - cron: '0 6 * * 1'  # Every Monday 6 AM UTC

jobs:
  build:
    name: Build book
    runs-on: ubuntu-latest
    steps:
      - name: Download source
        uses: actions/checkout@v2
      - name: Install Crystal
        uses: oprypin/install-crystal@v1
      - name: Install Python
        uses: actions/setup-python@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-
      - name: Build book
        run: LINT=1 make build
      - name: Disallow unchecked intra-site links
        run: make check_internal_links
      - name: Persist built book
        uses: actions/upload-artifact@v2
        with:
          name: site
          path: site

  deploy:
    name: Deploy book
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/1.')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Fetch built book
        uses: actions/download-artifact@v2
        with:
          name: site
          path: site
      - name: Build versions file
        run: |
          printf '[' >versions.json
          delim=''; latest='"latest"'
          for ver in $(git ls-remote --heads https://github.com/${{ github.repository }} | grep -P -o '(?<=refs/heads/)[0-9][0-9.]+' | sort -V -r); do
            printf '%s{"version": "%s", "title": "%s", "aliases": [%s]}' "$delim" "$ver" "$ver" "$latest" >>versions.json
            delim=', '; latest=''
          done
          printf ']' >>versions.json
          test -n "$delim"  # Check that we wrote at least one version
      - name: Extract branch name
        id: extract_branch
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
      #- name: Configure AWS Credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: us-east-1
      - name: Deploy book
        uses: oprypin/push-to-gh-pages@v3
        with:
          publish_dir: site
          destination_dir: ${{ steps.extract_branch.outputs.branch }}
          commit_message: 'Generate ${{ steps.extract_branch.outputs.branch }} docs: '
        #run: |
        #  aws s3 sync ./site s3://crystal-book/reference/${{ steps.extract_branch.outputs.branch }} --delete
      - name: Deploy versions file
        uses: oprypin/push-to-gh-pages@v3
        with:
          publish_dir: .
          keep_files: true
          full_commit_message: 'Generate version file'
        #run: |
        #  aws s3 sync . s3://crystal-book/reference --exclude '*' --include 'versions.json'
